// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package problempb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProblemServiceClient is the client API for ProblemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemServiceClient interface {
	ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error)
	GetProblemById(ctx context.Context, in *GetProblemByIdRequest, opts ...grpc.CallOption) (*GetProblemByIdResponse, error)
	SearchProblemByCondition(ctx context.Context, in *SearchProblemByConditionRequest, opts ...grpc.CallOption) (*SearchProblemByConditionResponse, error)
	CreateContest(ctx context.Context, in *CreateContestRequest, opts ...grpc.CallOption) (*CreateContestResponse, error)
	ListContests(ctx context.Context, in *ListContestsRequest, opts ...grpc.CallOption) (*ListContestsResponse, error)
	GetContestById(ctx context.Context, in *GetContestByIdRequest, opts ...grpc.CallOption) (*GetContestByIdResponse, error)
	AddContestParticipant(ctx context.Context, in *AddContestParticipantRequest, opts ...grpc.CallOption) (*AddContestParticipantResponse, error)
	GenerateContestParticipants(ctx context.Context, in *GenerateContestParticipantsRequest, opts ...grpc.CallOption) (*GenerateContestParticipantsResponse, error)
	AddContestAdmin(ctx context.Context, in *AddContestAdminRequest, opts ...grpc.CallOption) (*AddContestAdminResponse, error)
	GetContestAdmins(ctx context.Context, in *GetContestAdminsRequest, opts ...grpc.CallOption) (*GetContestAdminsResponse, error)
	GetContestParticipants(ctx context.Context, in *GetContestParticipantsRequest, opts ...grpc.CallOption) (*GetContestParticipantsResponse, error)
}

type problemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemServiceClient(cc grpc.ClientConnInterface) ProblemServiceClient {
	return &problemServiceClient{cc}
}

func (c *problemServiceClient) ListProblems(ctx context.Context, in *ListProblemsRequest, opts ...grpc.CallOption) (*ListProblemsResponse, error) {
	out := new(ListProblemsResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/ListProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemById(ctx context.Context, in *GetProblemByIdRequest, opts ...grpc.CallOption) (*GetProblemByIdResponse, error) {
	out := new(GetProblemByIdResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/GetProblemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) SearchProblemByCondition(ctx context.Context, in *SearchProblemByConditionRequest, opts ...grpc.CallOption) (*SearchProblemByConditionResponse, error) {
	out := new(SearchProblemByConditionResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/SearchProblemByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateContest(ctx context.Context, in *CreateContestRequest, opts ...grpc.CallOption) (*CreateContestResponse, error) {
	out := new(CreateContestResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/CreateContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) ListContests(ctx context.Context, in *ListContestsRequest, opts ...grpc.CallOption) (*ListContestsResponse, error) {
	out := new(ListContestsResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/ListContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetContestById(ctx context.Context, in *GetContestByIdRequest, opts ...grpc.CallOption) (*GetContestByIdResponse, error) {
	out := new(GetContestByIdResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/GetContestById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) AddContestParticipant(ctx context.Context, in *AddContestParticipantRequest, opts ...grpc.CallOption) (*AddContestParticipantResponse, error) {
	out := new(AddContestParticipantResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/AddContestParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GenerateContestParticipants(ctx context.Context, in *GenerateContestParticipantsRequest, opts ...grpc.CallOption) (*GenerateContestParticipantsResponse, error) {
	out := new(GenerateContestParticipantsResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/GenerateContestParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) AddContestAdmin(ctx context.Context, in *AddContestAdminRequest, opts ...grpc.CallOption) (*AddContestAdminResponse, error) {
	out := new(AddContestAdminResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/AddContestAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetContestAdmins(ctx context.Context, in *GetContestAdminsRequest, opts ...grpc.CallOption) (*GetContestAdminsResponse, error) {
	out := new(GetContestAdminsResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/GetContestAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetContestParticipants(ctx context.Context, in *GetContestParticipantsRequest, opts ...grpc.CallOption) (*GetContestParticipantsResponse, error) {
	out := new(GetContestParticipantsResponse)
	err := c.cc.Invoke(ctx, "/sdk.ProblemService/GetContestParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServiceServer is the server API for ProblemService service.
// All implementations must embed UnimplementedProblemServiceServer
// for forward compatibility
type ProblemServiceServer interface {
	ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error)
	GetProblemById(context.Context, *GetProblemByIdRequest) (*GetProblemByIdResponse, error)
	SearchProblemByCondition(context.Context, *SearchProblemByConditionRequest) (*SearchProblemByConditionResponse, error)
	CreateContest(context.Context, *CreateContestRequest) (*CreateContestResponse, error)
	ListContests(context.Context, *ListContestsRequest) (*ListContestsResponse, error)
	GetContestById(context.Context, *GetContestByIdRequest) (*GetContestByIdResponse, error)
	AddContestParticipant(context.Context, *AddContestParticipantRequest) (*AddContestParticipantResponse, error)
	GenerateContestParticipants(context.Context, *GenerateContestParticipantsRequest) (*GenerateContestParticipantsResponse, error)
	AddContestAdmin(context.Context, *AddContestAdminRequest) (*AddContestAdminResponse, error)
	GetContestAdmins(context.Context, *GetContestAdminsRequest) (*GetContestAdminsResponse, error)
	GetContestParticipants(context.Context, *GetContestParticipantsRequest) (*GetContestParticipantsResponse, error)
	mustEmbedUnimplementedProblemServiceServer()
}

// UnimplementedProblemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProblemServiceServer struct {
}

func (UnimplementedProblemServiceServer) ListProblems(context.Context, *ListProblemsRequest) (*ListProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblems not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemById(context.Context, *GetProblemByIdRequest) (*GetProblemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemById not implemented")
}
func (UnimplementedProblemServiceServer) SearchProblemByCondition(context.Context, *SearchProblemByConditionRequest) (*SearchProblemByConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProblemByCondition not implemented")
}
func (UnimplementedProblemServiceServer) CreateContest(context.Context, *CreateContestRequest) (*CreateContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContest not implemented")
}
func (UnimplementedProblemServiceServer) ListContests(context.Context, *ListContestsRequest) (*ListContestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContests not implemented")
}
func (UnimplementedProblemServiceServer) GetContestById(context.Context, *GetContestByIdRequest) (*GetContestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestById not implemented")
}
func (UnimplementedProblemServiceServer) AddContestParticipant(context.Context, *AddContestParticipantRequest) (*AddContestParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContestParticipant not implemented")
}
func (UnimplementedProblemServiceServer) GenerateContestParticipants(context.Context, *GenerateContestParticipantsRequest) (*GenerateContestParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateContestParticipants not implemented")
}
func (UnimplementedProblemServiceServer) AddContestAdmin(context.Context, *AddContestAdminRequest) (*AddContestAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContestAdmin not implemented")
}
func (UnimplementedProblemServiceServer) GetContestAdmins(context.Context, *GetContestAdminsRequest) (*GetContestAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestAdmins not implemented")
}
func (UnimplementedProblemServiceServer) GetContestParticipants(context.Context, *GetContestParticipantsRequest) (*GetContestParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestParticipants not implemented")
}
func (UnimplementedProblemServiceServer) mustEmbedUnimplementedProblemServiceServer() {}

// UnsafeProblemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServiceServer will
// result in compilation errors.
type UnsafeProblemServiceServer interface {
	mustEmbedUnimplementedProblemServiceServer()
}

func RegisterProblemServiceServer(s grpc.ServiceRegistrar, srv ProblemServiceServer) {
	s.RegisterService(&_ProblemService_serviceDesc, srv)
}

func _ProblemService_ListProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/ListProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListProblems(ctx, req.(*ListProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/GetProblemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemById(ctx, req.(*GetProblemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_SearchProblemByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProblemByConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).SearchProblemByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/SearchProblemByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).SearchProblemByCondition(ctx, req.(*SearchProblemByConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/CreateContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateContest(ctx, req.(*CreateContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_ListContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).ListContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/ListContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).ListContests(ctx, req.(*ListContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetContestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetContestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/GetContestById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetContestById(ctx, req.(*GetContestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_AddContestParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContestParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).AddContestParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/AddContestParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).AddContestParticipant(ctx, req.(*AddContestParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GenerateContestParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateContestParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GenerateContestParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/GenerateContestParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GenerateContestParticipants(ctx, req.(*GenerateContestParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_AddContestAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContestAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).AddContestAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/AddContestAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).AddContestAdmin(ctx, req.(*AddContestAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetContestAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetContestAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/GetContestAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetContestAdmins(ctx, req.(*GetContestAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetContestParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetContestParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.ProblemService/GetContestParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetContestParticipants(ctx, req.(*GetContestParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProblemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.ProblemService",
	HandlerType: (*ProblemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProblems",
			Handler:    _ProblemService_ListProblems_Handler,
		},
		{
			MethodName: "GetProblemById",
			Handler:    _ProblemService_GetProblemById_Handler,
		},
		{
			MethodName: "SearchProblemByCondition",
			Handler:    _ProblemService_SearchProblemByCondition_Handler,
		},
		{
			MethodName: "CreateContest",
			Handler:    _ProblemService_CreateContest_Handler,
		},
		{
			MethodName: "ListContests",
			Handler:    _ProblemService_ListContests_Handler,
		},
		{
			MethodName: "GetContestById",
			Handler:    _ProblemService_GetContestById_Handler,
		},
		{
			MethodName: "AddContestParticipant",
			Handler:    _ProblemService_AddContestParticipant_Handler,
		},
		{
			MethodName: "GenerateContestParticipants",
			Handler:    _ProblemService_GenerateContestParticipants_Handler,
		},
		{
			MethodName: "AddContestAdmin",
			Handler:    _ProblemService_AddContestAdmin_Handler,
		},
		{
			MethodName: "GetContestAdmins",
			Handler:    _ProblemService_GetContestAdmins_Handler,
		},
		{
			MethodName: "GetContestParticipants",
			Handler:    _ProblemService_GetContestParticipants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "problempb/service.proto",
}
